{"version":3,"file":"docs-script.bundle.js","mappings":"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","sources":["webpack://@cipscis/activate/./src/activate.ts","webpack://@cipscis/activate/./docs/assets/js/src/docs-script.ts"],"sourcesContent":["/** A record of secondary bindings for a given element and primary binding pair. */\ninterface ActivateBinding {\n\tspacebarFn: (this: HTMLElement, e: KeyboardEvent) => any;\n\tenterFn?: (this: HTMLElement, e: KeyboardEvent) => any;\n}\n\n/** An event listener that can accept keyboard or mouse events. */\ninterface ActivateEventListener {\n\t(this: HTMLElement, e: KeyboardEvent | MouseEvent): any\n}\n\nconst boundEvents: Map<HTMLElement, Map<ActivateEventListener, ActivateBinding>> = new Map();\n\n/**\n * Handles the conversion of the elements parameter so the activator function only ever has to deal with single HTMLElements.\n *\n * @param {string | HTMLElement | NodeListOf<HTMLElement>} elements - A CSS selector string, HTMLElement, or NodeList of HTMLElements to be converted so the activator function is called once for each resulting HTMLElement.\n * @param {ActivateEventListener} fn - The event listener to bind to each HTMLElement.\n * @param {(element: HTMLElement, fn: ActivateEventListener) => void} activator - The function to link each HTMLElement to fn.\n *\n * @throws {DOMException} - If the elements argument is an invalid CSS selector string.\n */\nfunction _activator(\n\telements: string | HTMLElement | NodeListOf<HTMLElement>,\n\tfn: ActivateEventListener,\n\tactivator: (element: HTMLElement, fn: ActivateEventListener) => void,\n): void {\n\t// Share the same initial logic between activate and deactivate,\n\t// but run a different function over each element\n\n\tif (typeof elements === 'string') {\n\t\ttry {\n\t\t\telements = document.querySelectorAll(elements);\n\t\t} catch (e) {\n\t\t\tconst method = activator === _deactivateSingle ? 'deactivate' : 'activate';\n\t\t\tthrow new DOMException(`${method} failed because it was passed an invalid selector string: '${elements}'`);\n\t\t}\n\t}\n\n\tif (elements instanceof HTMLElement) {\n\t\tactivator(elements, fn);\n\t} else {\n\t\telements.forEach((element) => activator(element, fn));\n\t}\n}\n\n/**\n * Binds fn to a single element.\n *\n * @param {HTMLElement} element\n * @param {ActivateEventListener} fn\n *\n * @throws {TypeError} - element must be an HTMLElement.\n */\nfunction _activateSingle(element: HTMLElement, fn: ActivateEventListener): void {\n\tif (!(element instanceof HTMLElement)) {\n\t\tthrow new TypeError(`activate failed because a valid HTMLElement was not passed`);\n\t}\n\n\tif (_getElementBindings(element, fn)) {\n\t\t// Like addEventListener, don't try to rebind new copies of the same events\n\t\treturn;\n\t}\n\n\t// All nodes should bind the click event\n\telement.addEventListener('click', fn);\n\n\t// Buttons will already treat keyboard events like clicks,\n\t// so only bind them to other element types\n\tif (!(element instanceof HTMLButtonElement)) {\n\t\tif (_getElementHasBindings(element) === false) {\n\t\t\t// addEventListener would prevent this event being\n\t\t\t// bound multiple times, but be explicit that it is\n\t\t\t// only bound if the element has no other events bound\n\t\t\telement.addEventListener('keydown', _preventSpacebarScroll);\n\t\t}\n\n\t\tconst spacebarFn = _makeSpacebarFn(fn);\n\t\telement.addEventListener('keyup', spacebarFn);\n\n\t\tconst bindings: ActivateBinding = {\n\t\t\tspacebarFn\n\t\t};\n\n\t\t// Links already treat \"enter\" keydown like a click\n\t\tif (!(element instanceof HTMLAnchorElement)) {\n\t\t\t// Note that holding down \"enter\" will behave differently\n\t\t\t// for links in that it will only fire once, whereas for\n\t\t\t// non-links, including buttons, it will fire multiple times\n\t\t\tconst enterFn = _makeEnterFn(fn);\n\t\t\telement.addEventListener('keydown', enterFn);\n\n\t\t\tbindings.enterFn = enterFn;\n\t\t}\n\n\t\t_rememberElementBindings(element, fn, bindings);\n\t}\n}\n\n/**\n * Unbinds fn from a single element.\n *\n * @param {HTMLElement} element\n * @param {ActivateEventListener} fn\n *\n * @throws {TypeError} - element must be an HTMLElement.\n */\nfunction _deactivateSingle(element: HTMLElement, fn: ActivateEventListener): void {\n\tif (!(element instanceof HTMLElement)) {\n\t\tthrow new TypeError(`deactivate failed because a valid HTMLElement was not passed`);\n\t}\n\n\t// All elements have had a click event bound\n\telement.removeEventListener('click', fn);\n\n\tconst bindings = _getElementBindings(element, fn);\n\tif (!bindings) {\n\t\t// No other events to unbind\n\t\treturn;\n\t}\n\n\t// Buttons will already treat keyboard events like clicks,\n\t// so they didn't have keyboard events bound to them\n\tif (!(element instanceof HTMLButtonElement)) {\n\t\tif (bindings.spacebarFn) {\n\t\t\telement.removeEventListener('keyup', bindings.spacebarFn);\n\t\t}\n\n\t\t// Links already treat \"enter\" keydown like a click,\n\t\t// so that event wasn't bound to them\n\t\tif (!(element instanceof HTMLAnchorElement)) {\n\t\t\tif (bindings.enterFn) {\n\t\t\t\telement.removeEventListener('keydown', bindings.enterFn);\n\t\t\t}\n\t\t}\n\n\t\t_forgetElementBindings(element, fn);\n\n\t\tif (_getElementHasBindings(element) === false) {\n\t\t\t// Only unbind this event if the element has no other bindings\n\t\t\telement.removeEventListener('keydown', _preventSpacebarScroll);\n\t\t}\n\t}\n}\n\n/**\n * Record a new set of bindings for a particular element, associated with a new primary binding.\n *\n * @param {HTMLElement} element\n * @param {ActivateEventListener} fn - The primary binding.\n * @param {ActivateBinding} bindings - The secondary bindings.\n */\nfunction _rememberElementBindings(element: HTMLElement, fn: ActivateEventListener, bindings: ActivateBinding): void {\n\tlet elementB = boundEvents.get(element);\n\n\tif (!elementB) {\n\t\telementB = new Map([[fn, bindings]]);\n\t\tboundEvents.set(element, elementB);\n\t}\n\n\tlet fnB = elementB.get(fn);\n\tif (fnB) {\n\t\tObject.assign(fnB, bindings);\n\t} else {\n\t\tfnB = Object.assign({}, bindings);\n\t\telementB.set(fn, fnB);\n\t}\n}\n\n/**\n * Delete any records of bindings for a particular element and primary binding pair.\n *\n * @param {HTMLElement} element\n * @param {ActivateEventListener} fn\n */\nfunction _forgetElementBindings(element: HTMLElement, fn: ActivateEventListener): void {\n\tconst elementB = boundEvents.get(element);\n\tif (!elementB) {\n\t\treturn;\n\t}\n\n\telementB.delete(fn);\n\tboundEvents.delete(element);\n}\n\n/**\n * Return the bindings for a particular element and primary binding pair.\n *\n * @param {HTMLElement} element\n * @param {ActivateEventListener} fn\n */\nfunction _getElementBindings(element: HTMLElement, fn: ActivateEventListener): ActivateBinding | undefined {\n\tconst elementB = boundEvents.get(element);\n\n\tif (!elementB) {\n\t\treturn undefined;\n\t}\n\n\tconst fnB = elementB.get(fn);\n\n\treturn fnB;\n}\n\n/**\n * Checks whether or not any bindings are recorded for a particular element and primary binding pair.\n *\n * @param  {HTMLElement} element\n *\n * @return {boolean}\n */\nfunction _getElementHasBindings(element: HTMLElement): boolean {\n\treturn boundEvents.has(element);\n}\n\nfunction _makeEnterFn(fn: ActivateEventListener) {\n\treturn function (this: HTMLElement, e: KeyboardEvent): any {\n\t\tconst isEnter = _isEnter(e);\n\n\t\tif (isEnter) {\n\t\t\treturn fn.call(this, e);\n\t\t}\n\t};\n}\n\n/**\n * For a given KeyboardEvent, checks if it was triggered by the 'enter' key.\n *\n * @param  {KeyboardEvent} e\n *\n * @return {boolean}\n */\nfunction _isEnter(e: KeyboardEvent): boolean {\n\tconst isEnter = !!(e.key && (e.key.toLowerCase() === 'enter'));\n\n\treturn isEnter;\n}\n\n/**\n * For a given KeyboardEvent, if it was triggered by the 'spacebar' key, prevent the default action of scrolling the page.\n *\n * @param {KeyboardEvent} e\n */\nfunction _preventSpacebarScroll(this: HTMLElement, e: KeyboardEvent): void {\n\t// Prevent spacebar from scrolling the page down on keydown\n\tconst element = this;\n\n\t// Buttons and inputs don't have this default action of the 'spacebar' key, so don't prevent it.\n\tconst isButton = element instanceof HTMLButtonElement;\n\tconst isInput = element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement;\n\n\tconst isSpacebar = _isSpacebar(e);\n\n\tif (!isButton && !isInput && isSpacebar) {\n\t\te.preventDefault();\n\t}\n}\n\n/**\n * Create a secondary binding that calls fn when triggered via the spacebar.\n *\n * @param {ActivateEventListener} fn\n */\nfunction _makeSpacebarFn(fn: ActivateEventListener) {\n\treturn function (this: HTMLElement, e: KeyboardEvent): any {\n\t\tconst isSpacebar = _isSpacebar(e);\n\n\t\tif (isSpacebar) {\n\t\t\treturn fn.call(this, e);\n\t\t}\n\t};\n}\n\n/**\n * Checks if a given KeyboardEvent was triggered by the 'spacebar' key.\n *\n * @param  {KeyboardEvent} e\n *\n * @return {boolean}\n */\nfunction _isSpacebar(e: KeyboardEvent): boolean {\n\t// IE11 uses 'spacebar' instead of ' '\n\tconst isSpacebar = !!(e.key && (e.key === ' ' || e.key.toLowerCase() === 'spacebar'));\n\n\treturn isSpacebar;\n}\n\n/**\n * Bind fn to all specified elements.\n *\n * @param {string | HTMLElement | NodeListOf<HTMLElement>} elements - The elements to have fn bound to them.\n * @param {ActivateEventListener} fn - The event listener to bind.\n *\n * @throws {DOMException} - If the elements argument is an invalid CSS selector string.\n */\nfunction activate(elements: string | HTMLElement | NodeListOf<HTMLElement>, fn: ActivateEventListener): void {\n\t_activator(elements, fn, _activateSingle);\n}\n\n/**\n * Unbind fn from all specified elements.\n *\n * @param {string | HTMLElement | NodeListOf<HTMLElement>} elements - The elements to have fn unbound from them.\n * @param {ActivateEventListener} fn - The event listener to unbind.\n *\n * @throws {DOMException} - If the elements argument is an invalid CSS selector string.\n */\nfunction deactivate(elements: string | HTMLElement | NodeListOf<HTMLElement>, fn: ActivateEventListener): void {\n\t_activator(elements, fn, _deactivateSingle);\n}\n\nexport {\n\tactivate,\n\tdeactivate,\n\n\tActivateEventListener,\n};\nexport default activate;\n","import { activate, deactivate, ActivateEventListener } from '@cipscis/activate';\n// import { activate, deactivate, ActivateEventListener } from '../../../../src/activate';\n\nconst increment: ActivateEventListener = function (this: HTMLElement, e: KeyboardEvent | MouseEvent) {\n\te.preventDefault();\n\n\tconst el = e.target as HTMLElement;\n\tconst activateCount = el.getAttribute('data-activate-count');\n\n\tlet activateNum = 0;\n\tif (activateCount) {\n\t\tactivateNum = parseInt(activateCount, 10);\n\t}\n\n\tactivateNum += 1;\n\tconst activateStr = activateNum.toString();\n\n\tel.setAttribute('data-activate-count', activateStr);\n};\n\n\n// NodeList\nconst nodelist = document.querySelectorAll<HTMLElement>('.js-activate-nodelist');\nactivate(nodelist, increment);\n\n// HTMLElement\nconst element = document.querySelector<HTMLElement>('.js-activate-element');\nif (element) {\n\tactivate(element, increment);\n}\n\n// string\nconst string = '.js-activate-string';\nactivate(string, increment);\n\n\n// Element types\nactivate('.js-activate-types', increment);\n\n\n// Deactivate\nconst counter = document.querySelector<HTMLElement>('.js-deactivate-counter');\n\nif (counter) {\n\tactivate('.js-deactivate-on', () => activate(counter, increment));\n\tactivate('.js-deactivate-off', () => deactivate(counter, increment));\n}\n"],"names":["boundEvents","Map","_activator","elements","fn","activator","document","querySelectorAll","e","DOMException","_deactivateSingle","HTMLElement","forEach","element","_activateSingle","TypeError","_getElementBindings","addEventListener","HTMLButtonElement","_getElementHasBindings","_preventSpacebarScroll","spacebarFn","_isSpacebar","call","this","_makeSpacebarFn","bindings","HTMLAnchorElement","enterFn","key","toLowerCase","_isEnter","_makeEnterFn","elementB","get","set","fnB","Object","assign","_rememberElementBindings","removeEventListener","delete","_forgetElementBindings","has","isButton","isInput","HTMLInputElement","HTMLTextAreaElement","isSpacebar","preventDefault","activate","increment","el","target","activateCount","getAttribute","activateNum","parseInt","activateStr","toString","setAttribute","querySelector","counter"],"sourceRoot":""}